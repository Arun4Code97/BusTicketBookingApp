<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BookMyBus</title>
    <link rel="stylesheet" th:href="@{/bootstrap/bootstrap.min.css}">
    <link rel="stylesheet" th:href="@{/css/portalTemplate.css}">
    <style>

.bus-card {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 20px;
    background-color: #f9f9f9;
    }
/* Flex layout for placing lower and upper decks horizontally */

.seats-container {
    margin-top: 20px;
    padding: 10px;
    border: 1px solid #ccc;
    background-color: #fff;
    display: flex;
    gap:20px;
    }
.deck-container {
    padding:20px;
    border : 1px solid black;
    border-radius :10px;
    display: flex;
    justify-content: space-between; /* Evenly distribute decks */
}
.deck-container h6 {
    text-align: center;
    margin-bottom: 10px;
    font-weight: bold;
    color: #333;
}
.deck {
    display: flex;
    flex-direction:row;
    flex: 1;
    min-width: 120px; /* Set a minimum width to prevent the deck from becoming too narrow */
    margin: 0 10px; /* Add spacing between decks */
}


.seat-row {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-bottom: 10px;
}

.sleeper-seat {
    text-align: center;
    border: 1px solid #ccc;
    cursor: pointer;
    transition: transform 0.3s ease;
    width: 30px; height: 50px; border-radius: 5px;
}

.seater-seat {
    text-align: center;
    border: 1px solid #ccc;
    cursor: pointer;
    transition: transform 0.3s ease;
    width: 30px; height: 30px; border-radius: 5px;
}

.booked {
    background-color: gray;
    color: white;
    cursor: not-allowed;
    }
.available, .empty{
    border: 1px solid #858585;
    }
.d-none {
    display: none;
     }

/* Media Query for Smaller or Medium Screens */
@media (max-width: 768px) {
    .seats-container {
        flex-direction: column; /* Stack decks vertically */
        align-items: center; /* Center decks horizontally */
    }

    .deck-container {
        margin-bottom: 20px; /* Add spacing between stacked decks */
    }
}
    </style>
</head>
<body>

<div class="wrapper">
    <div class="content-wrapper">
        <!-- Sidebar -->
        <nav class="col-md-3 col-lg-2 d-md-block bg-secondary text-white sidebar sidebar-sticky">
            <div class="position-sticky pt-3">
                <h3 class="text-white">Passenger</h3>
                <div class="navigation" th:replace="~{utility/passengerNavigation :: navigation}"></div>
            </div>
        </nav>
        <!-- Main Content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="pt-3 pb-2 mb-3 border-bottom">
                <h4 class="text-start mb-2">BookMyBus</h4>

                <div class="innerContainer">
                    <h5 class="text-start mb-4">Select Bus</h5>

                    <!-- Available Buses Section -->
                    <h6 class="text-start mb-2">
                        <span th:if="${availableBuses.size() > 0}">
                            <span th:text="'Found ' + ${availableBuses.size()} + ' buses from : '"></span>
                            <span class="from-place" th:text="${searchDto.fromPlace}"></span>
                            <span style='font-size:18px;'>&#8594;</span>
                            <span class="to-place" th:text="${searchDto.toPlace}"></span>
                            on <span class="trip-date" th:text="' ' + ${searchDto.tripDate}"></span>
                        </span>
                        <span th:if="${availableBuses.size() == 0}">
                            No buses found from :
                            <span class="from-place" th:text="' ' + ${searchDto.fromPlace}"></span>
                            <span style='font-size:18px;'>&#8594;</span>
                            <span class="to-place" th:text="' ' + ${searchDto.toPlace}"></span>
                            on <span class="trip-date" th:text="' ' + ${searchDto.tripDate}"></span>
                        </span>
                    </h6>

                    <form class="form-inline" th:action="@{/bookMyBus/passengerPortal/{id}/selectBus(id=${passenger.id})}" method="post" id="passengerForm">
                        <div th:each="bus : ${availableBuses}" class="bus-card">
                            <h5 th:text="${bus.name}" class="text-primary"></h5>
                            <p>Route: <span th:text="${bus.routes[0].departurePlace}"></span> â†’ <span th:text="${bus.routes[0].arrivalPlace}"></span></p>
                            <p>Departure: <span th:text="${bus.routes[0].departureTime}"></span></p>
                            <p>Arrival: <span th:text="${bus.routes[0].arrivalTime}"></span></p>

                            <!-- Show Seats Button -->
                            <button type="button" class="btn btn-info"
                                    th:onclick="'showSeats(' + ${bus.id} + ')'">
                                Show Seats
                            </button>

                            <!-- Seats Container -->
                            <div th:id="'seats-container-' + ${bus.id}" class="seats-container d-none"></div>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>
</div>

<script>
    function showSeats(busId) {
        console.log("Bus ID:", busId);

        const container = document.getElementById(`seats-container-${busId}`);
        if (!container) {
            console.error("Container not found for bus ID:", busId);
            return;
        }

        if (!container.classList.contains("d-none")) {
            container.classList.add("d-none");
            return; // Hide if already visible
        }

        fetch(`/bookMyBus/passengerPortal/${busId}/seatsss`) // Replace with actual API endpoint
            .then(response => {
                if (!response.ok) throw new Error("Failed to fetch seat data");
                return response.json();
            })
            .then(data => {
                renderSeats(data, container);
                container.classList.remove("d-none"); // Show after rendering
            })
            .catch(error => {
                console.error("Error fetching seat data:", error);
                alert("Failed to load seats. Please try again.");
            });
    }

function renderSeats(data, container) {
    container.innerHTML = ""; // Clear previous seats

    // Lower Deck
    const lowerDeckWrapper = document.createElement('div');
    lowerDeckWrapper.className = 'deck-wrapper';

    const lowerDeckHeader = document.createElement('h6');
    lowerDeckHeader.textContent = "Lower Deck";
    lowerDeckWrapper.appendChild(lowerDeckHeader);

    const lowerDeckContainer = document.createElement('div');
    lowerDeckContainer.className = 'deck-container';

    if (data.lowerLeftSeatCountInEachRow && data.lowerLeftTotalRowsCount) {
        lowerDeckContainer.innerHTML += renderSection(data.seats.lowerLeft, "Lower Deck - Left", data.lowerLeftSeatCountInEachRow, data.lowerLeftTotalRowsCount);
    }
    if (data.lowerRightSeatCountInEachRow && data.lowerRightTotalRowsCount) {
        lowerDeckContainer.innerHTML += renderSection(data.seats.lowerRight, "Lower Deck - Right", data.lowerRightSeatCountInEachRow, data.lowerRightTotalRowsCount);
    }

    lowerDeckWrapper.appendChild(lowerDeckContainer);

    // Upper Deck
    const upperDeckWrapper = document.createElement('div');
    upperDeckWrapper.className = 'deck-wrapper';

    const upperDeckHeader = document.createElement('h6');
    upperDeckHeader.textContent = "Upper Deck";
    upperDeckWrapper.appendChild(upperDeckHeader);

    const upperDeckContainer = document.createElement('div');
    upperDeckContainer.className = 'deck-container';

    if (data.upperLeftSeatCountInEachRow && data.upperTotalRowsCount) {
        upperDeckContainer.innerHTML += renderSection(data.seats.upperLeft, "Upper Deck - Left", data.upperLeftSeatCountInEachRow, data.upperTotalRowsCount);
    }
    if (data.upperRightSeatCountInEachRow && data.upperTotalRowsCount) {
        upperDeckContainer.innerHTML += renderSection(data.seats.upperRight, "Upper Deck - Right", data.upperRightSeatCountInEachRow, data.upperTotalRowsCount);
    }

    upperDeckWrapper.appendChild(upperDeckContainer);

    // Append both deck wrappers to the main container
    container.appendChild(lowerDeckWrapper);
    container.appendChild(upperDeckWrapper);
}


function renderSection(seats, sectionName, seatsPerRow, totalRows) {
    let html = `<div class="deck"><div class="seat-grid">`;

    for (let row = 0; row < totalRows; row++) {
        html += `<div class="seat-row">`;
        for (let col = 0; col < seatsPerRow; col++) {
            const seatIndex = row * seatsPerRow + col;
            if (seatIndex < seats.length) {
                const seat = seats[seatIndex];
                html += renderSeat(seat);
            } else {
                html += `<div class="seat empty"></div>`;
            }
        }
        html += `</div>`;
    }

    html += `</div></div>`;
    return html;
}

function renderSeat(seat) {
    // Determine the seat class based on its type
    let seatTypeClass = "";
    if (seat.seatType === "sleeper") {
        seatTypeClass = "sleeper-seat";
    } else {
        seatTypeClass = "seater-seat";
    }

    const seatClass = seat.isBooked ? "booked" : "available";

    // Combine classes and render the seat
    return `<div class="${seatClass} ${seatTypeClass}" data-seat-id="${seat.id}">${seat.seatNumber}</div>`;
}


</script>

</body>
</html>
